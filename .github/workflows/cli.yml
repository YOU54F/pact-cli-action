name: Build

on:
  push:
  workflow_dispatch:

jobs:
  ubuntu:
    timeout-minutes: 10
    strategy:
      matrix:
        os: [ubuntu-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - run: ./cli.sh
        name: bash
        shell: bash
      - run: ./cli.sh
        name: sh
        shell: sh
      - run: curl -fsSL https://raw.githubusercontent.com/pact-foundation/pact-ruby-standalone/master/install.sh | bash && pact/bin/pact help
      - run: rm -rf pact
      - run: wget -q https://raw.githubusercontent.com/pact-foundation/pact-ruby-standalone/master/install.sh -O- | bash && pact/bin/pact help
      - run: rm -rf pact
      - run: curl -fsSL https://raw.githubusercontent.com/pact-foundation/pact-ruby-standalone/master/install.sh | sh && pact/bin/pact help
      - run: rm -rf pact
      - run: wget -q https://raw.githubusercontent.com/pact-foundation/pact-ruby-standalone/master/install.sh -O- | sh && pact/bin/pact help
      - run: rm -rf pact

  mac:
    timeout-minutes: 10
    strategy:
      matrix:
        os: [macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - run: ./cli.sh
      - run: |
          brew tap pact-foundation/pact-ruby-standalone
          brew install pact-ruby-standalone
          pact help
        shell: bash
      - run: curl -fsSL https://raw.githubusercontent.com/pact-foundation/pact-ruby-standalone/master/install.sh | bash && pact/bin/pact help
      - run: rm -rf pact

  windows:
    timeout-minutes: 10
    strategy:
      matrix:
        os: [windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - run: |
          detected_os=$(uname -sm)
          echo detected_os = $detected_os
          case ${detected_os} in
          'Linux x86_64' | "Linux"*)
              echo 'using linux-x86_64'
              os='linux-x86_64'
              ;;
          'Darwin x86' | 'Darwin x86_64' | 'Darwin arm64' | "Darwin"*)
              echo 'using osx'
              os='osx'
              ;;
          "Windows"* | "MINGW64"*)
              echo 'using win32'
              os='win32'
              ;;
            *)
            echo "Sorry, you'll need to install the pact-ruby-standalone manually."
            echo "or add your os to the list"
            exit 1
              ;;
          esac

          tag=$(basename $(curl -fs -o/dev/null -w %{redirect_url} https://github.com/pact-foundation/pact-ruby-standalone/releases/latest))
          case $os in
          'linux-x86_64' | 'osx')
              filename="pact-${tag#v}-${os}.tar.gz"
              curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/${tag}/${filename}
              tar xzf ${filename}
              ;;
          'win32')
              filename="pact-${tag#v}-${os}.zip"
              curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/${tag}/${filename}

              unzip ${filename}
              ext=.bat
              ;;
          esac
          pact/bin/pact-broker${ext} help
        shell: bash
      - run: echo "PATH=${PATH}:${PWD}/pact/bin/" >> $GITHUB_ENV
        if: runner.os != 'windows'
        shell: bash
      - run: pact-broker.bat
        if: runner.os == 'windows'
        shell: cmd
      - run: |
          "$pwd\pact\bin\" >> $env:GITHUB_PATH
        if: runner.os == 'windows'
        shell: powershell
      - run: pact-broker
        if: runner.os != 'windows'
        shell: bash